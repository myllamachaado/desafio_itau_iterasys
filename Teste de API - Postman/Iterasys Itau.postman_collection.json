{
	"info": {
		"_postman_id": "a0ab6cc8-2d81-4f50-97b9-4571d2839d4a",
		"name": "Iterasys Itau",
		"description": "This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.\n\nContact Support:\n Email: apiteam@swagger.io",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Incluir Pessoas",
			"item": [
				{
					"name": "Create user maria.assuncao",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Create user maria.assuncao', function(){\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test('has a id', function(){\r",
									"    const {id} = pm.response.json();\r",
									"    pm.environment.set('id_maria', id);\r",
									"    //console.log(pm.variables.get('id_venda_brutus')); \r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "    {\n    \"id\": 0,\n    \"username\": \"maria.assuncao\",\n    \"firstName\": \"maria\",\n    \"lastName\": \"assuncao\",\n    \"email\": \"maria.assuncao@teste.iterasys\",\n    \"password\": \"123456\",\n    \"phone\": \"37666666666\",\n    \"userStatus\": 0\n  }"
						},
						"url": {
							"raw": "{{baseUrl}}/user",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user"
							]
						},
						"description": "This can only be done by the logged in user."
					},
					"response": [
						{
							"name": "successful operation",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"<long>\",\n    \"username\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"email\": \"<string>\",\n    \"password\": \"<string>\",\n    \"phone\": \"<string>\",\n    \"userStatus\": \"<integer>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/user",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Create user marcio.fernandes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Create user marcio.fernandes', function(){\r",
									"    pm.response.to.have.status(200);\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "\n  {\n    \"id\": 0,\n    \"username\": \"marcio.fernandes\",\n    \"firstName\": \"marcio\",\n    \"lastName\": \"fernandes\",\n    \"email\": \"marcio.fernandes@teste.iterasys\",\n    \"password\": \"123456\",\n    \"phone\": \"37666666666\",\n    \"userStatus\": 0\n  }"
						},
						"url": {
							"raw": "{{baseUrl}}/user",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user"
							]
						},
						"description": "This can only be done by the logged in user."
					},
					"response": [
						{
							"name": "successful operation",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"<long>\",\n    \"username\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"email\": \"<string>\",\n    \"password\": \"<string>\",\n    \"phone\": \"<string>\",\n    \"userStatus\": \"<integer>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/user",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Create user lucas.fernandes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Create user lucas.fernandes', function(){\r",
									"    pm.response.to.have.status(200);\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "\n  {\n    \"id\": 0,\n    \"username\": \"lucas.fernandes\",\n    \"firstName\": \"lucas\",\n    \"lastName\": \"fernandes\",\n    \"email\": \"lucas.fernandes@teste.iterasys\",\n    \"password\": \"123456\",\n    \"phone\": \"37666666666\",\n    \"userStatus\": 0\n  }"
						},
						"url": {
							"raw": "{{baseUrl}}/user",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user"
							]
						},
						"description": "This can only be done by the logged in user."
					},
					"response": [
						{
							"name": "successful operation",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"<long>\",\n    \"username\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"email\": \"<string>\",\n    \"password\": \"<string>\",\n    \"phone\": \"<string>\",\n    \"userStatus\": \"<integer>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/user",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Create user karina.fernandes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Create user karina.fernandes', function(){\r",
									"    pm.response.to.have.status(200);\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "\n  {\n    \"id\": 0,\n    \"username\": \"karina.fernandes\",\n    \"firstName\": \"karina\",\n    \"lastName\": \"fernandes\",\n    \"email\": \"karina.fernandes@teste.iterasys\",\n    \"password\": \"123456\",\n    \"phone\": \"37666666666\",\n    \"userStatus\": 0\n  }"
						},
						"url": {
							"raw": "{{baseUrl}}/user",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user"
							]
						},
						"description": "This can only be done by the logged in user."
					},
					"response": [
						{
							"name": "successful operation",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"<long>\",\n    \"username\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"email\": \"<string>\",\n    \"password\": \"<string>\",\n    \"phone\": \"<string>\",\n    \"userStatus\": \"<integer>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/user",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Create user luana.fernandes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Create user luana.fernandes', function(){\r",
									"    pm.response.to.have.status(200);\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "  {\n    \"id\": 0,\n    \"username\": \"luana.fernandes\",\n    \"firstName\": \"luana\",\n    \"lastName\": \"fernandes\",\n    \"email\": \"luana.fernandes@teste.iterasys\",\n    \"password\": \"123456\",\n    \"phone\": \"37666666666\",\n    \"userStatus\": 0\n  }"
						},
						"url": {
							"raw": "{{baseUrl}}/user",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user"
							]
						},
						"description": "This can only be done by the logged in user."
					},
					"response": [
						{
							"name": "successful operation",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"<long>\",\n    \"username\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"email\": \"<string>\",\n    \"password\": \"<string>\",\n    \"phone\": \"<string>\",\n    \"userStatus\": \"<integer>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/user",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Create user lorena.fernandes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Create user lorena.fernandes', function(){\r",
									"    pm.response.to.have.status(200);\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "  {\n    \"id\": 0,\n    \"username\": \"lorena.fernandes\",\n    \"firstName\": \"lorena\",\n    \"lastName\": \"fernandes\",\n    \"email\": \"lorena.fernandes@teste.iterasys\",\n    \"password\": \"123456\",\n    \"phone\": \"37666666666\",\n    \"userStatus\": 0\n  }"
						},
						"url": {
							"raw": "{{baseUrl}}/user",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user"
							]
						},
						"description": "This can only be done by the logged in user."
					},
					"response": [
						{
							"name": "successful operation",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"<long>\",\n    \"username\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"email\": \"<string>\",\n    \"password\": \"<string>\",\n    \"phone\": \"<string>\",\n    \"userStatus\": \"<integer>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/user",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				}
			]
		},
		{
			"name": "Incluir Pets",
			"item": [
				{
					"name": "Add Brutus",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Add Brutus', function(){\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test('has a id', function(){\r",
									"    const {id} = pm.response.json();\r",
									"    pm.environment.set('id_brutus', id);\r",
									"    //console.log(pm.variables.get('id_brutus')); \r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "    {\n        \"category\": { \"id\": 0, \"name\": \"Dog\"},\n        \"name\": \"Brutus\",\n        \"photoUrls\": [\"string\"],\n        \"tags\": [{\"id\": 0, \"name\": \"Dog\" }],\n        \"status\": \"available\"\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/pet",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet"
							]
						}
					},
					"response": [
						{
							"name": "Invalid input",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": {
											"content": "Added as a part of security scheme: oauth2",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/pet",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pet"
									]
								}
							},
							"status": "Method Not Allowed",
							"code": 405,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Add Jungwoo",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Add Jungwoo', function(){\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test('has a id', function(){\r",
									"    const {id} = pm.response.json();\r",
									"    pm.environment.set('id_jungwoo', id);\r",
									"    //console.log(pm.variables.get('id_jungwoo')); \r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "    {\n        \"id\": 0,\n        \"category\": { \"id\": 0, \"name\": \"Dog\"},\n        \"name\": \"Jungwoo\",\n        \"photoUrls\": [\"string\"],\n        \"tags\": [{\"id\": 0, \"name\": \"Dog\" }],\n        \"status\": \"available\"\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/pet",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet"
							]
						}
					},
					"response": [
						{
							"name": "Invalid input",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": {
											"content": "Added as a part of security scheme: oauth2",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/pet",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pet"
									]
								}
							},
							"status": "Method Not Allowed",
							"code": 405,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Add Taemin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Add Taemin', function(){\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test('has a id', function(){\r",
									"    const {id} = pm.response.json();\r",
									"    pm.environment.set('id_taemin', id);\r",
									"    //console.log(pm.variables.get('id_taemin')); \r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": 0,\n  \"category\": {\n    \"id\": 0,\n    \"name\": \"Dog\"\n  },\n  \"name\": \"Taemin\",\n  \"photoUrls\": [\n    \"string.jpg\"\n  ],\n  \"tags\": [\n    {\n      \"id\": 0,\n      \"name\": \"Dog\"\n    }\n  ],\n  \"status\": \"available\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/pet",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet"
							]
						}
					},
					"response": [
						{
							"name": "Invalid input",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": {
											"content": "Added as a part of security scheme: oauth2",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/pet",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pet"
									]
								}
							},
							"status": "Method Not Allowed",
							"code": 405,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Add Chen",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Add Chen', function(){\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test('has a id', function(){\r",
									"    const {id} = pm.response.json();\r",
									"    pm.environment.set('id_chen', id);\r",
									"    //console.log(pm.variables.get('id_chen')); \r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": 0,\n  \"category\": {\n    \"id\": 0,\n    \"name\": \"Dog\"\n  },\n  \"name\": \"Chen\",\n  \"photoUrls\": [\n    \"string.jpg\"\n  ],\n  \"tags\": [\n    {\n      \"id\": 0,\n      \"name\": \"Dog\"\n    }\n  ],\n  \"status\": \"available\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/pet",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet"
							]
						}
					},
					"response": [
						{
							"name": "Invalid input",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": {
											"content": "Added as a part of security scheme: oauth2",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/pet",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pet"
									]
								}
							},
							"status": "Method Not Allowed",
							"code": 405,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Add Kai",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Add Kai', function(){\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test('has a id', function(){\r",
									"    const {id} = pm.response.json();\r",
									"    pm.environment.set('id_kai', id);\r",
									"    //console.log(pm.variables.get('id_kai')); \r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": 0,\n  \"category\": {\n    \"id\": 0,\n    \"name\": \"Dog\"\n  },\n  \"name\": \"Kai\",\n  \"photoUrls\": [\n    \"string.jpg\"\n  ],\n  \"tags\": [\n    {\n      \"id\": 0,\n      \"name\": \"Dog\"\n    }\n  ],\n  \"status\": \"available\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/pet",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet"
							]
						}
					},
					"response": [
						{
							"name": "Invalid input",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": {
											"content": "Added as a part of security scheme: oauth2",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/pet",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pet"
									]
								}
							},
							"status": "Method Not Allowed",
							"code": 405,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Add Jinki",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Add Jinki', function(){\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test('has a id', function(){\r",
									"    const {id} = pm.response.json();\r",
									"    pm.environment.set('id_jinki', id);\r",
									"    //console.log(pm.variables.get('id_jinki')); \r",
									"})\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": 0,\n  \"category\": {\n    \"id\": 0,\n    \"name\": \"Dog\"\n  },\n  \"name\": \"Jinki\",\n  \"photoUrls\": [\n    \"string.jpg\"\n  ],\n  \"tags\": [\n    {\n      \"id\": 0,\n      \"name\": \"Dog\"\n    }\n  ],\n  \"status\": \"available\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/pet",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet"
							]
						}
					},
					"response": [
						{
							"name": "Invalid input",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": {
											"content": "Added as a part of security scheme: oauth2",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/pet",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pet"
									]
								}
							},
							"status": "Method Not Allowed",
							"code": 405,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Add Irene",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Add Irene', function(){\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test('has a id', function(){\r",
									"    const {id} = pm.response.json();\r",
									"    pm.environment.set('id_irene', id);\r",
									"    //console.log(pm.variables.get('id_irene')); \r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": 0,\n  \"category\": {\n    \"id\": 0,\n    \"name\": \"Cat\"\n  },\n  \"name\": \"Irene\",\n  \"photoUrls\": [\n    \"string.jpg\"\n  ],\n  \"tags\": [\n    {\n      \"id\": 0,\n      \"name\": \"Cat\"\n    }\n  ],\n  \"status\": \"available\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/pet",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet"
							]
						}
					},
					"response": [
						{
							"name": "Invalid input",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": {
											"content": "Added as a part of security scheme: oauth2",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/pet",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pet"
									]
								}
							},
							"status": "Method Not Allowed",
							"code": 405,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Add Joy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Add Joy', function(){\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test('has a id', function(){\r",
									"    const {id} = pm.response.json();\r",
									"    pm.environment.set('id_joy', id);\r",
									"    //console.log(pm.variables.get('id_joy')); \r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": 0,\n  \"category\": {\n    \"id\": 0,\n    \"name\": \"Cat\"\n  },\n  \"name\": \"Joy\",\n  \"photoUrls\": [\n    \"string.jpg\"\n  ],\n  \"tags\": [\n    {\n      \"id\": 0,\n      \"name\": \"Cat\"\n    }\n  ],\n  \"status\": \"available\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/pet",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet"
							]
						}
					},
					"response": [
						{
							"name": "Invalid input",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": {
											"content": "Added as a part of security scheme: oauth2",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/pet",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pet"
									]
								}
							},
							"status": "Method Not Allowed",
							"code": 405,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Add Solar",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Add Solar', function(){\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test('has a id', function(){\r",
									"    const {id} = pm.response.json();\r",
									"    pm.environment.set('id_solar', id);\r",
									"    //console.log(pm.variables.get('id_solar')); \r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": 0,\n  \"category\": {\n    \"id\": 0,\n    \"name\": \"Cat\"\n  },\n  \"name\": \"Solar\",\n  \"photoUrls\": [\n    \"string.jpg\"\n  ],\n  \"tags\": [\n    {\n      \"id\": 0,\n      \"name\": \"Cat\"\n    }\n  ],\n  \"status\": \"available\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/pet",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet"
							]
						}
					},
					"response": [
						{
							"name": "Invalid input",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": {
											"content": "Added as a part of security scheme: oauth2",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/pet",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pet"
									]
								}
							},
							"status": "Method Not Allowed",
							"code": 405,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Add Yoona",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Add Yoona', function(){\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test('has a id', function(){\r",
									"    const {id} = pm.response.json();\r",
									"    pm.environment.set('id_yoona', id);\r",
									"    //console.log(pm.variables.get('id_yoona')); \r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": 0,\n  \"category\": {\n    \"id\": 0,\n    \"name\": \"Cat\"\n  },\n  \"name\": \"Yoona\",\n  \"photoUrls\": [\n    \"string.jpg\"\n  ],\n  \"tags\": [\n    {\n      \"id\": 0,\n      \"name\": \"Cat\"\n    }\n  ],\n  \"status\": \"available\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/pet",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet"
							]
						}
					},
					"response": [
						{
							"name": "Invalid input",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": {
											"content": "Added as a part of security scheme: oauth2",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/pet",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pet"
									]
								}
							},
							"status": "Method Not Allowed",
							"code": 405,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Add Yuri",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Add Yuri', function(){\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test('has a id', function(){\r",
									"    const {id} = pm.response.json();\r",
									"    pm.environment.set('id_yuri', id);\r",
									"    //console.log(pm.variables.get('id_yuri')); \r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": 0,\n  \"category\": {\n    \"id\": 0,\n    \"name\": \"Cat\"\n  },\n  \"name\": \"Yuri\",\n  \"photoUrls\": [\n    \"string.jpg\"\n  ],\n  \"tags\": [\n    {\n      \"id\": 0,\n      \"name\": \"Cat\"\n    }\n  ],\n  \"status\": \"available\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/pet",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet"
							]
						}
					},
					"response": [
						{
							"name": "Invalid input",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": {
											"content": "Added as a part of security scheme: oauth2",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/pet",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pet"
									]
								}
							},
							"status": "Method Not Allowed",
							"code": 405,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				}
			]
		},
		{
			"name": "Vendas",
			"item": [
				{
					"name": "Desloga usuário atual da sessão",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Logs out current logged in user session', function(){\r",
									"    pm.response.to.have.status(200);\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/user/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"logout"
							]
						}
					},
					"response": [
						{
							"name": "successful operation",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/user/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										"logout"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Faz o login como maria.assuncao",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Logs user into the system', function(){\r",
									"    pm.response.to.have.status(200);\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/user/login?username=maria.assuncao&password=123456",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"login"
							],
							"query": [
								{
									"key": "username",
									"value": "maria.assuncao",
									"description": "(Required) The user name for login"
								},
								{
									"key": "password",
									"value": "123456",
									"description": "(Required) The password for login in clear text"
								}
							]
						}
					},
					"response": [
						{
							"name": "Invalid username/password supplied",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/user/login?username=<string>&password=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										"login"
									],
									"query": [
										{
											"key": "username",
											"value": "<string>"
										},
										{
											"key": "password",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "successful operation",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/user/login?username=<string>&password=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										"login"
									],
									"query": [
										{
											"key": "username",
											"value": "<string>"
										},
										{
											"key": "password",
											"value": "<string>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Expires-After",
									"value": "2005-10-20T13:30:08.012Z",
									"description": "date in UTC when token expires"
								},
								{
									"key": "X-Rate-Limit",
									"value": "-22633469",
									"description": "calls per hour allowed by the user"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"occaecat laborum eu cillum\""
						}
					]
				},
				{
					"name": "Vender Brutus maria.assuncao",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Vender Brutus maria.assuncao', function(){\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test('has a id', function(){\r",
									"    const {id} = pm.response.json();\r",
									"    pm.environment.set('id_venda_brutus', id);\r",
									"    //console.log(pm.variables.get('id_venda_brutus')); \r",
									"})\r",
									"\r",
									"pm.test('has a petId', function(){\r",
									"    const {petId} = pm.response.json();\r",
									"    pm.environment.set('id_brutus', petId);\r",
									"    //console.log(pm.variables.get('id_brutus')); \r",
									"})\r",
									"\r",
									"pm.test('has a status', function(){\r",
									"    const {status} = pm.response.json();\r",
									"    pm.environment.set('status_venda_brutus', status);\r",
									"    //console.log(pm.variables.get('status_venda_brutus')); \r",
									"})\r",
									"\r",
									"pm.test('has a completed', function(){\r",
									"    const {completed} = pm.response.json();\r",
									"    pm.environment.set('completed_venda_brutus', completed);\r",
									"    //console.log(pm.variables.get('completed_venda_brutus')); \r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"petId\": \"{{id_brutus}}\",\n  \"quantity\": 1,\n  \"shipDate\": \"2020-12-19T05:47:00.916Z\",\n  \"status\": \"placed\",\n  \"complete\": true\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/store/order",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"store",
								"order"
							]
						}
					},
					"response": [
						{
							"name": "Invalid Order",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"<long>\",\n    \"petId\": \"<long>\",\n    \"quantity\": \"<integer>\",\n    \"shipDate\": \"<dateTime>\",\n    \"status\": \"<string>\",\n    \"complete\": \"<boolean>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/store/order",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"store",
										"order"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "successful operation",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"<long>\",\n    \"petId\": \"<long>\",\n    \"quantity\": \"<integer>\",\n    \"shipDate\": \"<dateTime>\",\n    \"status\": \"<string>\",\n    \"complete\": \"<boolean>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/store/order",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"store",
										"order"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"id\": \"<long>\",\n \"petId\": \"<long>\",\n \"quantity\": \"<integer>\",\n \"shipDate\": \"<dateTime>\",\n \"status\": \"<string>\",\n \"complete\": \"<boolean>\"\n}"
						}
					]
				},
				{
					"name": "Brutus status delivered e validacoes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Brutus status delivered e validacoes', function(){\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test('has a id', function(){\r",
									"    const {id} = pm.response.json();\r",
									"    pm.environment.set('id_venda_brutus_delivered', id);\r",
									"    //console.log(pm.variables.get('id_venda_brutus_delivered')); \r",
									"})\r",
									"\r",
									"pm.test('has a petId', function(){\r",
									"    const {petId} = pm.response.json();\r",
									"    pm.environment.set('id_brutus_delivered', petId);\r",
									"    //console.log(pm.variables.get('id_brutus_delivered')); \r",
									"})\r",
									"\r",
									"pm.test('has a status', function(){\r",
									"    const {status} = pm.response.json();\r",
									"    pm.environment.set('status_venda_brutus_delivered', status);\r",
									"    //console.log(pm.variables.get('status_venda_brutus_delivered')); \r",
									"})\r",
									"\r",
									"pm.test('has a completed', function(){\r",
									"    const {completed} = pm.response.json();\r",
									"    pm.environment.set('completed_venda_brutus_delivered', completed);\r",
									"    //console.log(pm.variables.get('completed_venda_brutus_delivered')); \r",
									"})\r",
									"\r",
									"pm.test('Checa status da venda = delivered', function(){\r",
									"var id_venda_brutus = pm.variables.get('id_venda_brutus');\r",
									"var id_venda_brutus_delivered = pm.variables.get('id_venda_brutus_delivered');\r",
									"var status_venda_brutus_delivered = pm.variables.get('status_venda_brutus_delivered');\r",
									"\r",
									"    if((pm.expect(id_venda_brutus).to.eql(id_venda_brutus_delivered))&&\r",
									"        (pm.expect(status_venda_brutus_delivered).to.eql('delivered'))){\r",
									"        console.log('Status da venda trocado com sucesso');\r",
									"    }\r",
									"\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"petId\": \"{{id_brutus}}\",\n  \"quantity\": 1,\n  \"shipDate\": \"2020-12-19T05:47:00.916Z\",\n  \"status\": \"delivered\",\n  \"complete\": true\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/store/order",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"store",
								"order"
							]
						}
					},
					"response": [
						{
							"name": "Invalid Order",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"<long>\",\n    \"petId\": \"<long>\",\n    \"quantity\": \"<integer>\",\n    \"shipDate\": \"<dateTime>\",\n    \"status\": \"<string>\",\n    \"complete\": \"<boolean>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/store/order",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"store",
										"order"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "successful operation",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"<long>\",\n    \"petId\": \"<long>\",\n    \"quantity\": \"<integer>\",\n    \"shipDate\": \"<dateTime>\",\n    \"status\": \"<string>\",\n    \"complete\": \"<boolean>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/store/order",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"store",
										"order"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"id\": \"<long>\",\n \"petId\": \"<long>\",\n \"quantity\": \"<integer>\",\n \"shipDate\": \"<dateTime>\",\n \"status\": \"<string>\",\n \"complete\": \"<boolean>\"\n}"
						}
					]
				},
				{
					"name": "Desloga maria.assuncao da sessão",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Logs out current logged in user session', function(){\r",
									"    pm.response.to.have.status(200);\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/user/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"logout"
							]
						}
					},
					"response": [
						{
							"name": "successful operation",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/user/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										"logout"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Faz o login como marcio.fernandes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Logs user into the system', function(){\r",
									"    pm.response.to.have.status(200);\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/user/login?username=marcio.fernandes&password=123456",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"login"
							],
							"query": [
								{
									"key": "username",
									"value": "marcio.fernandes",
									"description": "(Required) The user name for login"
								},
								{
									"key": "password",
									"value": "123456",
									"description": "(Required) The password for login in clear text"
								}
							]
						}
					},
					"response": [
						{
							"name": "Invalid username/password supplied",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/user/login?username=<string>&password=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										"login"
									],
									"query": [
										{
											"key": "username",
											"value": "<string>"
										},
										{
											"key": "password",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "successful operation",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/user/login?username=<string>&password=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										"login"
									],
									"query": [
										{
											"key": "username",
											"value": "<string>"
										},
										{
											"key": "password",
											"value": "<string>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Expires-After",
									"value": "2005-10-20T13:30:08.012Z",
									"description": "date in UTC when token expires"
								},
								{
									"key": "X-Rate-Limit",
									"value": "-22633469",
									"description": "calls per hour allowed by the user"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"occaecat laborum eu cillum\""
						}
					]
				},
				{
					"name": "Vender Jungwoo (dog) para marcio.fernandes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Vender Jungwoo (dog) para marcio.fernandes', function(){\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test('has a id', function(){\r",
									"    const {id} = pm.response.json();\r",
									"    pm.environment.set('id_venda_jungwoo', id);\r",
									"    //console.log(pm.variables.get('id_venda_jungwoo')); \r",
									"})\r",
									"\r",
									"pm.test('has a petId', function(){\r",
									"    const {petId} = pm.response.json();\r",
									"    pm.environment.set('id_jungwoo', petId);\r",
									"    //console.log(pm.variables.get('id_jungwoo')); \r",
									"})\r",
									"\r",
									"pm.test('has a status', function(){\r",
									"    const {status} = pm.response.json();\r",
									"    pm.environment.set('status_venda_jungwoo', status);\r",
									"    //console.log(pm.variables.get('status_venda_jungwoo')); \r",
									"})\r",
									"\r",
									"pm.test('has a completed', function(){\r",
									"    const {completed} = pm.response.json();\r",
									"    pm.environment.set('completed_venda_jungwoo', completed);\r",
									"    //console.log(pm.variables.get('completed_venda_jungwoo')); \r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"petId\": \"{{id_jungwoo}}\",\n  \"quantity\": 1,\n  \"shipDate\": \"2020-12-19T05:47:00.916Z\",\n  \"status\": \"placed\",\n  \"complete\": true\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/store/order",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"store",
								"order"
							]
						}
					},
					"response": [
						{
							"name": "Invalid Order",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"<long>\",\n    \"petId\": \"<long>\",\n    \"quantity\": \"<integer>\",\n    \"shipDate\": \"<dateTime>\",\n    \"status\": \"<string>\",\n    \"complete\": \"<boolean>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/store/order",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"store",
										"order"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "successful operation",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"<long>\",\n    \"petId\": \"<long>\",\n    \"quantity\": \"<integer>\",\n    \"shipDate\": \"<dateTime>\",\n    \"status\": \"<string>\",\n    \"complete\": \"<boolean>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/store/order",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"store",
										"order"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"id\": \"<long>\",\n \"petId\": \"<long>\",\n \"quantity\": \"<integer>\",\n \"shipDate\": \"<dateTime>\",\n \"status\": \"<string>\",\n \"complete\": \"<boolean>\"\n}"
						}
					]
				},
				{
					"name": "Jungwoo status delivered e validacoes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Jungwoo status delivered e validacoes', function(){\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test('has a id', function(){\r",
									"    const {id} = pm.response.json();\r",
									"    pm.environment.set('id_venda_jungwoo_delivered', id);\r",
									"    //console.log(pm.variables.get('id_venda_brutus_delivered')); \r",
									"})\r",
									"\r",
									"pm.test('has a petId', function(){\r",
									"    const {petId} = pm.response.json();\r",
									"    pm.environment.set('id_jungwoo_delivered', petId);\r",
									"    //console.log(pm.variables.get('id_brutus_delivered')); \r",
									"})\r",
									"\r",
									"pm.test('has a status', function(){\r",
									"    const {status} = pm.response.json();\r",
									"    pm.environment.set('status_venda_jungwoo_delivered', status);\r",
									"    //console.log(pm.variables.get('status_venda_brutus_delivered')); \r",
									"})\r",
									"\r",
									"pm.test('has a completed', function(){\r",
									"    const {completed} = pm.response.json();\r",
									"    pm.environment.set('completed_venda_jungwoo_delivered', completed);\r",
									"    //console.log(pm.variables.get('completed_venda_brutus_delivered')); \r",
									"})\r",
									"\r",
									"pm.test('Checa status da venda = delivered', function(){\r",
									"var id_venda_jungwoo = pm.variables.get('id_venda_jungwoo');\r",
									"var id_venda_jungwoo_delivered = pm.variables.get('id_venda_jungwoo_delivered');\r",
									"var status_venda_jungwoo_delivered = pm.variables.get('status_venda_jungwoo_delivered');\r",
									"\r",
									"    if((pm.expect(id_venda_jungwoo).to.eql(id_venda_jungwoo_delivered))&&\r",
									"        (pm.expect(status_venda_jungwoo_delivered).to.eql('delivered'))){\r",
									"        console.log('Status da venda trocado com sucesso');\r",
									"    }\r",
									"\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"petId\": \"{{id_jungwoo}}\",\n  \"quantity\": 1,\n  \"shipDate\": \"2020-12-19T05:47:00.916Z\",\n  \"status\": \"delivered\",\n  \"complete\": true\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/store/order",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"store",
								"order"
							]
						}
					},
					"response": [
						{
							"name": "successful operation",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"<long>\",\n    \"petId\": \"<long>\",\n    \"quantity\": \"<integer>\",\n    \"shipDate\": \"<dateTime>\",\n    \"status\": \"<string>\",\n    \"complete\": \"<boolean>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/store/order",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"store",
										"order"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"id\": \"<long>\",\n \"petId\": \"<long>\",\n \"quantity\": \"<integer>\",\n \"shipDate\": \"<dateTime>\",\n \"status\": \"<string>\",\n \"complete\": \"<boolean>\"\n}"
						},
						{
							"name": "Invalid Order",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"<long>\",\n    \"petId\": \"<long>\",\n    \"quantity\": \"<integer>\",\n    \"shipDate\": \"<dateTime>\",\n    \"status\": \"<string>\",\n    \"complete\": \"<boolean>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/store/order",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"store",
										"order"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Vender Irene (cat) para marcio.fernandes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Vender Brutus Maria', function(){\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test('has a id', function(){\r",
									"    const {id} = pm.response.json();\r",
									"    pm.environment.set('id_venda_irene', id);\r",
									"    //console.log(pm.variables.get('id_venda_irene')); \r",
									"})\r",
									"\r",
									"pm.test('has a petId', function(){\r",
									"    const {petId} = pm.response.json();\r",
									"    pm.environment.set('id_irene', petId);\r",
									"    //console.log(pm.variables.get('id_irene')); \r",
									"})\r",
									"\r",
									"pm.test('has a status', function(){\r",
									"    const {status} = pm.response.json();\r",
									"    pm.environment.set('status_venda_irene', status);\r",
									"    //console.log(pm.variables.get('status_venda_irene')); \r",
									"})\r",
									"\r",
									"pm.test('has a completed', function(){\r",
									"    const {completed} = pm.response.json();\r",
									"    pm.environment.set('completed_venda_irene', completed);\r",
									"    //console.log(pm.variables.get('completed_venda_irene')); \r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"petId\": \"{{id_irene}}\",\n  \"quantity\": 1,\n  \"shipDate\": \"2020-12-19T05:47:00.916Z\",\n  \"status\": \"placed\",\n  \"complete\": true\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/store/order",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"store",
								"order"
							]
						}
					},
					"response": [
						{
							"name": "successful operation",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"<long>\",\n    \"petId\": \"<long>\",\n    \"quantity\": \"<integer>\",\n    \"shipDate\": \"<dateTime>\",\n    \"status\": \"<string>\",\n    \"complete\": \"<boolean>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/store/order",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"store",
										"order"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"id\": \"<long>\",\n \"petId\": \"<long>\",\n \"quantity\": \"<integer>\",\n \"shipDate\": \"<dateTime>\",\n \"status\": \"<string>\",\n \"complete\": \"<boolean>\"\n}"
						},
						{
							"name": "Invalid Order",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"<long>\",\n    \"petId\": \"<long>\",\n    \"quantity\": \"<integer>\",\n    \"shipDate\": \"<dateTime>\",\n    \"status\": \"<string>\",\n    \"complete\": \"<boolean>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/store/order",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"store",
										"order"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Irene status approved e validacoes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Irene status approved e validacoes', function(){\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test('has a id', function(){\r",
									"    const {id} = pm.response.json();\r",
									"    pm.environment.set('id_venda_irene_approved', id);\r",
									"    //console.log(pm.variables.get('id_venda_brutus_delivered')); \r",
									"})\r",
									"\r",
									"pm.test('has a petId', function(){\r",
									"    const {petId} = pm.response.json();\r",
									"    pm.environment.set('id_irene_approved', petId);\r",
									"    //console.log(pm.variables.get('id_brutus_delivered')); \r",
									"})\r",
									"\r",
									"pm.test('has a status', function(){\r",
									"    const {status} = pm.response.json();\r",
									"    pm.environment.set('status_venda_irene_approved', status);\r",
									"    //console.log('status da venda', pm.variables.get('status_venda_irene_approved'))\r",
									"})\r",
									"\r",
									"pm.test('has a completed', function(){\r",
									"    const {completed} = pm.response.json();\r",
									"    pm.environment.set('completed_venda_irene_approved', completed);\r",
									"    //console.log(pm.variables.get('completed_venda_brutus_delivered')); \r",
									"})\r",
									"\r",
									"pm.test('Checa status da venda = delivered', function(){\r",
									"var id_venda_irene = pm.variables.get('id_venda_irene');\r",
									"var id_venda_irene_approved = pm.variables.get('id_venda_irene_approved');\r",
									"var status_venda_irene_approved = pm.variables.get('status_venda_irene_approved');\r",
									"\r",
									"    if((pm.expect(id_venda_irene).to.eql(id_venda_irene_approved))&&\r",
									"        (pm.expect(status_venda_irene_approved).to.eql('approved'))){\r",
									"        console.log('Status da venda trocado com sucesso');\r",
									"    }\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"petId\": \"{{id_irene}}\",\n  \"quantity\": 1,\n  \"shipDate\": \"2020-12-19T05:47:00.916Z\",\n  \"status\": \"approved\",\n  \"complete\": true\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/store/order",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"store",
								"order"
							]
						}
					},
					"response": [
						{
							"name": "successful operation",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"<long>\",\n    \"petId\": \"<long>\",\n    \"quantity\": \"<integer>\",\n    \"shipDate\": \"<dateTime>\",\n    \"status\": \"<string>\",\n    \"complete\": \"<boolean>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/store/order",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"store",
										"order"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"id\": \"<long>\",\n \"petId\": \"<long>\",\n \"quantity\": \"<integer>\",\n \"shipDate\": \"<dateTime>\",\n \"status\": \"<string>\",\n \"complete\": \"<boolean>\"\n}"
						},
						{
							"name": "Invalid Order",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"<long>\",\n    \"petId\": \"<long>\",\n    \"quantity\": \"<integer>\",\n    \"shipDate\": \"<dateTime>\",\n    \"status\": \"<string>\",\n    \"complete\": \"<boolean>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/store/order",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"store",
										"order"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Desloga marcio.fernandes da sessão",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Logs out current logged in user session', function(){\r",
									"    pm.response.to.have.status(200);\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/user/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"logout"
							]
						}
					},
					"response": [
						{
							"name": "successful operation",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/user/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										"logout"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Faz o login como lucas.fernandes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Logs user into the system', function(){\r",
									"    pm.response.to.have.status(200);\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/user/login?username=lucas.fernandes&password=123456",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"login"
							],
							"query": [
								{
									"key": "username",
									"value": "lucas.fernandes",
									"description": "(Required) The user name for login"
								},
								{
									"key": "password",
									"value": "123456",
									"description": "(Required) The password for login in clear text"
								}
							]
						}
					},
					"response": [
						{
							"name": "successful operation",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/user/login?username=<string>&password=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										"login"
									],
									"query": [
										{
											"key": "username",
											"value": "<string>"
										},
										{
											"key": "password",
											"value": "<string>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Expires-After",
									"value": "2005-10-20T13:30:08.012Z",
									"description": "date in UTC when token expires"
								},
								{
									"key": "X-Rate-Limit",
									"value": "-22633469",
									"description": "calls per hour allowed by the user"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"occaecat laborum eu cillum\""
						},
						{
							"name": "Invalid username/password supplied",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/user/login?username=<string>&password=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										"login"
									],
									"query": [
										{
											"key": "username",
											"value": "<string>"
										},
										{
											"key": "password",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Vender Taemin (dog) para lucas.fernandes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Vender Brutus Maria', function(){\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test('has a id', function(){\r",
									"    const {id} = pm.response.json();\r",
									"    pm.environment.set('id_venda_taemin', id);\r",
									"    console.log(pm.variables.get('id_venda_taemin')); \r",
									"})\r",
									"\r",
									"pm.test('has a petId', function(){\r",
									"    const {petId} = pm.response.json();\r",
									"    pm.environment.set('id_taemin', petId);\r",
									"    console.log(pm.variables.get('id_taemin')); \r",
									"})\r",
									"\r",
									"pm.test('has a status', function(){\r",
									"    const {status} = pm.response.json();\r",
									"    pm.environment.set('status_venda_taemin', status);\r",
									"    console.log(pm.variables.get('status_venda_taemin')); \r",
									"})\r",
									"\r",
									"pm.test('has a completed', function(){\r",
									"    const {completed} = pm.response.json();\r",
									"    pm.environment.set('completed_venda_taemin', completed);\r",
									"    console.log(pm.variables.get('completed_venda_taemin')); \r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"petId\": \"{{id_taemin}}\",\n  \"quantity\": 1,\n  \"shipDate\": \"2020-12-19T05:47:00.916Z\",\n  \"status\": \"placed\",\n  \"complete\": true\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/store/order",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"store",
								"order"
							]
						}
					},
					"response": [
						{
							"name": "successful operation",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"<long>\",\n    \"petId\": \"<long>\",\n    \"quantity\": \"<integer>\",\n    \"shipDate\": \"<dateTime>\",\n    \"status\": \"<string>\",\n    \"complete\": \"<boolean>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/store/order",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"store",
										"order"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"id\": \"<long>\",\n \"petId\": \"<long>\",\n \"quantity\": \"<integer>\",\n \"shipDate\": \"<dateTime>\",\n \"status\": \"<string>\",\n \"complete\": \"<boolean>\"\n}"
						},
						{
							"name": "Invalid Order",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"<long>\",\n    \"petId\": \"<long>\",\n    \"quantity\": \"<integer>\",\n    \"shipDate\": \"<dateTime>\",\n    \"status\": \"<string>\",\n    \"complete\": \"<boolean>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/store/order",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"store",
										"order"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Taemin status delivered e validacoes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Taemin status delivered e validacoes', function(){\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test('has a id', function(){\r",
									"    const {id} = pm.response.json();\r",
									"    pm.environment.set('id_venda_taemin_delivered', id);\r",
									"    //console.log(pm.variables.get('id_venda_brutus_delivered')); \r",
									"})\r",
									"\r",
									"pm.test('has a petId', function(){\r",
									"    const {petId} = pm.response.json();\r",
									"    pm.environment.set('id_taemin_delivered', petId);\r",
									"    //console.log(pm.variables.get('id_brutus_delivered')); \r",
									"})\r",
									"\r",
									"pm.test('has a status', function(){\r",
									"    const {status} = pm.response.json();\r",
									"    pm.environment.set('status_venda_taemin_delivered', status);\r",
									"    //console.log(pm.variables.get('status_venda_brutus_delivered')); \r",
									"})\r",
									"\r",
									"pm.test('has a completed', function(){\r",
									"    const {completed} = pm.response.json();\r",
									"    pm.environment.set('completed_venda_taemin_delivered', completed);\r",
									"    //console.log(pm.variables.get('completed_venda_brutus_delivered')); \r",
									"})\r",
									"\r",
									"pm.test('Checa status da venda = delivered', function(){\r",
									"var id_venda_taemin = pm.variables.get('id_venda_taemin');\r",
									"var id_venda_taemin_delivered = pm.variables.get('id_venda_taemin_delivered');\r",
									"var status_venda_taemin_delivered = pm.variables.get('status_venda_taemin_delivered');\r",
									"\r",
									"    if((pm.expect(id_venda_taemin).to.eql(id_venda_taemin_delivered))&&\r",
									"        (pm.expect(status_venda_taemin_delivered).to.eql('delivered'))){\r",
									"        console.log('Status da venda trocado com sucesso');\r",
									"    }\r",
									"\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"petId\": \"{{id_taemin}}\",\n  \"quantity\": 1,\n  \"shipDate\": \"2020-12-19T05:47:00.916Z\",\n  \"status\": \"delivered\",\n  \"complete\": true\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/store/order",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"store",
								"order"
							]
						}
					},
					"response": [
						{
							"name": "Invalid Order",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"<long>\",\n    \"petId\": \"<long>\",\n    \"quantity\": \"<integer>\",\n    \"shipDate\": \"<dateTime>\",\n    \"status\": \"<string>\",\n    \"complete\": \"<boolean>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/store/order",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"store",
										"order"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "successful operation",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"<long>\",\n    \"petId\": \"<long>\",\n    \"quantity\": \"<integer>\",\n    \"shipDate\": \"<dateTime>\",\n    \"status\": \"<string>\",\n    \"complete\": \"<boolean>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/store/order",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"store",
										"order"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"id\": \"<long>\",\n \"petId\": \"<long>\",\n \"quantity\": \"<integer>\",\n \"shipDate\": \"<dateTime>\",\n \"status\": \"<string>\",\n \"complete\": \"<boolean>\"\n}"
						}
					]
				},
				{
					"name": "Vender Joy (cat) para lucas.fernandes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Vender Brutus Maria', function(){\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test('has a id', function(){\r",
									"    const {id} = pm.response.json();\r",
									"    pm.environment.set('id_venda_joy', id);\r",
									"    console.log(pm.variables.get('id_venda_joy')); \r",
									"})\r",
									"\r",
									"pm.test('has a petId', function(){\r",
									"    const {petId} = pm.response.json();\r",
									"    pm.environment.set('id_joy', petId);\r",
									"    console.log(pm.variables.get('id_joy')); \r",
									"})\r",
									"\r",
									"pm.test('has a status', function(){\r",
									"    const {status} = pm.response.json();\r",
									"    pm.environment.set('status_venda_joy', status);\r",
									"    console.log(pm.variables.get('status_venda_joy')); \r",
									"})\r",
									"\r",
									"pm.test('has a completed', function(){\r",
									"    const {completed} = pm.response.json();\r",
									"    pm.environment.set('completed_venda_joy', completed);\r",
									"    console.log(pm.variables.get('completed_venda_joy')); \r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"petId\": \"{{id_joy}}\",\n  \"quantity\": 1,\n  \"shipDate\": \"2020-12-19T05:47:00.916Z\",\n  \"status\": \"placed\",\n  \"complete\": true\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/store/order",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"store",
								"order"
							]
						}
					},
					"response": [
						{
							"name": "Invalid Order",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"<long>\",\n    \"petId\": \"<long>\",\n    \"quantity\": \"<integer>\",\n    \"shipDate\": \"<dateTime>\",\n    \"status\": \"<string>\",\n    \"complete\": \"<boolean>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/store/order",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"store",
										"order"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "successful operation",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"<long>\",\n    \"petId\": \"<long>\",\n    \"quantity\": \"<integer>\",\n    \"shipDate\": \"<dateTime>\",\n    \"status\": \"<string>\",\n    \"complete\": \"<boolean>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/store/order",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"store",
										"order"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"id\": \"<long>\",\n \"petId\": \"<long>\",\n \"quantity\": \"<integer>\",\n \"shipDate\": \"<dateTime>\",\n \"status\": \"<string>\",\n \"complete\": \"<boolean>\"\n}"
						}
					]
				},
				{
					"name": "Joy status approved e validacoes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Joy status approved e validacoes', function(){\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test('has a id', function(){\r",
									"    const {id} = pm.response.json();\r",
									"    pm.environment.set('id_venda_joy_approved', id);\r",
									"    //console.log(pm.variables.get('id_venda_brutus_delivered')); \r",
									"})\r",
									"\r",
									"pm.test('has a petId', function(){\r",
									"    const {petId} = pm.response.json();\r",
									"    pm.environment.set('id_joy_approved', petId);\r",
									"    //console.log(pm.variables.get('id_brutus_delivered')); \r",
									"})\r",
									"\r",
									"pm.test('has a status', function(){\r",
									"    const {status} = pm.response.json();\r",
									"    pm.environment.set('status_venda_joy_approved', status);\r",
									"    console.log('status da venda', pm.variables.get('status_venda_joy_approved'))\r",
									"})\r",
									"\r",
									"pm.test('has a completed', function(){\r",
									"    const {completed} = pm.response.json();\r",
									"    pm.environment.set('completed_venda_joy_approved', completed);\r",
									"    //console.log(pm.variables.get('completed_venda_brutus_delivered')); \r",
									"})\r",
									"\r",
									"pm.test('Checa status da venda = delivered', function(){\r",
									"var id_venda_joy = pm.variables.get('id_venda_joy');\r",
									"var id_venda_joy_approved = pm.variables.get('id_venda_joy_approved');\r",
									"var status_venda_joy_approved = pm.variables.get('status_venda_joy_approved');\r",
									"\r",
									"    if((pm.expect(id_venda_joy).to.eql(id_venda_joy_approved))&&\r",
									"        (pm.expect(status_venda_joy_approved).to.eql('approved'))){\r",
									"        console.log('Status da venda trocado com sucesso');\r",
									"    }\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"petId\": \"{{id_joy}}\",\n  \"quantity\": 1,\n  \"shipDate\": \"2020-12-19T05:47:00.916Z\",\n  \"status\": \"approved\",\n  \"complete\": true\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/store/order",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"store",
								"order"
							]
						}
					},
					"response": [
						{
							"name": "successful operation",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"<long>\",\n    \"petId\": \"<long>\",\n    \"quantity\": \"<integer>\",\n    \"shipDate\": \"<dateTime>\",\n    \"status\": \"<string>\",\n    \"complete\": \"<boolean>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/store/order",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"store",
										"order"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"id\": \"<long>\",\n \"petId\": \"<long>\",\n \"quantity\": \"<integer>\",\n \"shipDate\": \"<dateTime>\",\n \"status\": \"<string>\",\n \"complete\": \"<boolean>\"\n}"
						},
						{
							"name": "Invalid Order",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"<long>\",\n    \"petId\": \"<long>\",\n    \"quantity\": \"<integer>\",\n    \"shipDate\": \"<dateTime>\",\n    \"status\": \"<string>\",\n    \"complete\": \"<boolean>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/store/order",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"store",
										"order"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Desloga lucas.fernandes da sessão",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Logs out current logged in user session', function(){\r",
									"    pm.response.to.have.status(200);\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/user/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"logout"
							]
						}
					},
					"response": [
						{
							"name": "successful operation",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/user/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										"logout"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Faz o login como karina.fernandes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Logs user into the system', function(){\r",
									"    pm.response.to.have.status(200);\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/user/login?username=karina.fernandes&password=123456",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"login"
							],
							"query": [
								{
									"key": "username",
									"value": "karina.fernandes",
									"description": "(Required) The user name for login"
								},
								{
									"key": "password",
									"value": "123456",
									"description": "(Required) The password for login in clear text"
								}
							]
						}
					},
					"response": [
						{
							"name": "successful operation",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/user/login?username=<string>&password=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										"login"
									],
									"query": [
										{
											"key": "username",
											"value": "<string>"
										},
										{
											"key": "password",
											"value": "<string>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Expires-After",
									"value": "2005-10-20T13:30:08.012Z",
									"description": "date in UTC when token expires"
								},
								{
									"key": "X-Rate-Limit",
									"value": "-22633469",
									"description": "calls per hour allowed by the user"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"occaecat laborum eu cillum\""
						},
						{
							"name": "Invalid username/password supplied",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/user/login?username=<string>&password=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										"login"
									],
									"query": [
										{
											"key": "username",
											"value": "<string>"
										},
										{
											"key": "password",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Vender Chen (dog) para karina.fernandes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Vender Brutus Maria', function(){\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test('has a id', function(){\r",
									"    const {id} = pm.response.json();\r",
									"    pm.environment.set('id_venda_chen', id);\r",
									"    console.log(pm.variables.get('id_venda_chen')); \r",
									"})\r",
									"\r",
									"pm.test('has a petId', function(){\r",
									"    const {petId} = pm.response.json();\r",
									"    pm.environment.set('id_chen', petId);\r",
									"    console.log(pm.variables.get('id_chen')); \r",
									"})\r",
									"\r",
									"pm.test('has a status', function(){\r",
									"    const {status} = pm.response.json();\r",
									"    pm.environment.set('status_venda_chen', status);\r",
									"    console.log(pm.variables.get('status_venda_chen')); \r",
									"})\r",
									"\r",
									"pm.test('has a completed', function(){\r",
									"    const {completed} = pm.response.json();\r",
									"    pm.environment.set('completed_venda_chen', completed);\r",
									"    console.log(pm.variables.get('completed_venda_chen')); \r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"petId\": \"{{id_chen}}\",\n  \"quantity\": 1,\n  \"shipDate\": \"2020-12-19T05:47:00.916Z\",\n  \"status\": \"placed\",\n  \"complete\": true\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/store/order",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"store",
								"order"
							]
						}
					},
					"response": [
						{
							"name": "successful operation",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"<long>\",\n    \"petId\": \"<long>\",\n    \"quantity\": \"<integer>\",\n    \"shipDate\": \"<dateTime>\",\n    \"status\": \"<string>\",\n    \"complete\": \"<boolean>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/store/order",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"store",
										"order"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"id\": \"<long>\",\n \"petId\": \"<long>\",\n \"quantity\": \"<integer>\",\n \"shipDate\": \"<dateTime>\",\n \"status\": \"<string>\",\n \"complete\": \"<boolean>\"\n}"
						},
						{
							"name": "Invalid Order",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"<long>\",\n    \"petId\": \"<long>\",\n    \"quantity\": \"<integer>\",\n    \"shipDate\": \"<dateTime>\",\n    \"status\": \"<string>\",\n    \"complete\": \"<boolean>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/store/order",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"store",
										"order"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Chen status delivered e validacoes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Chen status delivered e validacoes', function(){\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test('has a id', function(){\r",
									"    const {id} = pm.response.json();\r",
									"    pm.environment.set('id_venda_chen_delivered', id);\r",
									"    //console.log(pm.variables.get('id_venda_brutus_delivered')); \r",
									"})\r",
									"\r",
									"pm.test('has a petId', function(){\r",
									"    const {petId} = pm.response.json();\r",
									"    pm.environment.set('id_chen_delivered', petId);\r",
									"    //console.log(pm.variables.get('id_brutus_delivered')); \r",
									"})\r",
									"\r",
									"pm.test('has a status', function(){\r",
									"    const {status} = pm.response.json();\r",
									"    pm.environment.set('status_venda_chen_delivered', status);\r",
									"    //console.log(pm.variables.get('status_venda_brutus_delivered')); \r",
									"})\r",
									"\r",
									"pm.test('has a completed', function(){\r",
									"    const {completed} = pm.response.json();\r",
									"    pm.environment.set('completed_venda_chen_delivered', completed);\r",
									"    //console.log(pm.variables.get('completed_venda_brutus_delivered')); \r",
									"})\r",
									"\r",
									"pm.test('Checa status da venda = delivered', function(){\r",
									"var id_venda_chen = pm.variables.get('id_venda_chen');\r",
									"var id_venda_chen_delivered = pm.variables.get('id_venda_chen_delivered');\r",
									"var status_venda_chen_delivered = pm.variables.get('status_venda_chen_delivered');\r",
									"\r",
									"    if((pm.expect(id_venda_chen).to.eql(id_venda_chen_delivered))&&\r",
									"        (pm.expect(status_venda_chen_delivered).to.eql('delivered'))){\r",
									"        console.log('Status da venda trocado com sucesso');\r",
									"    }\r",
									"\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"petId\": \"{{id_chen}}\",\n  \"quantity\": 1,\n  \"shipDate\": \"2020-12-19T05:47:00.916Z\",\n  \"status\": \"delivered\",\n  \"complete\": true\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/store/order",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"store",
								"order"
							]
						}
					},
					"response": [
						{
							"name": "Invalid Order",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"<long>\",\n    \"petId\": \"<long>\",\n    \"quantity\": \"<integer>\",\n    \"shipDate\": \"<dateTime>\",\n    \"status\": \"<string>\",\n    \"complete\": \"<boolean>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/store/order",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"store",
										"order"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "successful operation",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"<long>\",\n    \"petId\": \"<long>\",\n    \"quantity\": \"<integer>\",\n    \"shipDate\": \"<dateTime>\",\n    \"status\": \"<string>\",\n    \"complete\": \"<boolean>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/store/order",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"store",
										"order"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"id\": \"<long>\",\n \"petId\": \"<long>\",\n \"quantity\": \"<integer>\",\n \"shipDate\": \"<dateTime>\",\n \"status\": \"<string>\",\n \"complete\": \"<boolean>\"\n}"
						}
					]
				},
				{
					"name": "Vender Solar (cat) para karina.fernandes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Vender Brutus Maria', function(){\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test('has a id', function(){\r",
									"    const {id} = pm.response.json();\r",
									"    pm.environment.set('id_venda_solar', id);\r",
									"    console.log(pm.variables.get('id_venda_solar')); \r",
									"})\r",
									"\r",
									"pm.test('has a petId', function(){\r",
									"    const {petId} = pm.response.json();\r",
									"    pm.environment.set('id_solar', petId);\r",
									"    console.log(pm.variables.get('id_solar')); \r",
									"})\r",
									"\r",
									"pm.test('has a status', function(){\r",
									"    const {status} = pm.response.json();\r",
									"    pm.environment.set('status_venda_solar', status);\r",
									"    console.log(pm.variables.get('status_venda_solar')); \r",
									"})\r",
									"\r",
									"pm.test('has a completed', function(){\r",
									"    const {completed} = pm.response.json();\r",
									"    pm.environment.set('completed_venda_solar', completed);\r",
									"    console.log(pm.variables.get('completed_venda_solar')); \r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"petId\": \"{{id_solar}}\",\n  \"quantity\": 1,\n  \"shipDate\": \"2020-12-19T05:47:00.916Z\",\n  \"status\": \"placed\",\n  \"complete\": true\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/store/order",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"store",
								"order"
							]
						}
					},
					"response": [
						{
							"name": "successful operation",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"<long>\",\n    \"petId\": \"<long>\",\n    \"quantity\": \"<integer>\",\n    \"shipDate\": \"<dateTime>\",\n    \"status\": \"<string>\",\n    \"complete\": \"<boolean>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/store/order",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"store",
										"order"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"id\": \"<long>\",\n \"petId\": \"<long>\",\n \"quantity\": \"<integer>\",\n \"shipDate\": \"<dateTime>\",\n \"status\": \"<string>\",\n \"complete\": \"<boolean>\"\n}"
						},
						{
							"name": "Invalid Order",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"<long>\",\n    \"petId\": \"<long>\",\n    \"quantity\": \"<integer>\",\n    \"shipDate\": \"<dateTime>\",\n    \"status\": \"<string>\",\n    \"complete\": \"<boolean>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/store/order",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"store",
										"order"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Solar status approved e validacoes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Solar status approved e validacoes', function(){\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test('has a id', function(){\r",
									"    const {id} = pm.response.json();\r",
									"    pm.environment.set('id_venda_solar_approved', id);\r",
									"    //console.log(pm.variables.get('id_venda_brutus_delivered')); \r",
									"})\r",
									"\r",
									"pm.test('has a petId', function(){\r",
									"    const {petId} = pm.response.json();\r",
									"    pm.environment.set('id_solar_approved', petId);\r",
									"    //console.log(pm.variables.get('id_brutus_delivered')); \r",
									"})\r",
									"\r",
									"pm.test('has a status', function(){\r",
									"    const {status} = pm.response.json();\r",
									"    pm.environment.set('status_venda_solar_approved', status);\r",
									"    console.log('status da venda', pm.variables.get('status_venda_solar_approved'))\r",
									"})\r",
									"\r",
									"pm.test('has a completed', function(){\r",
									"    const {completed} = pm.response.json();\r",
									"    pm.environment.set('completed_venda_solar_approved', completed);\r",
									"    //console.log(pm.variables.get('completed_venda_brutus_delivered')); \r",
									"})\r",
									"\r",
									"pm.test('Checa status da venda = delivered', function(){\r",
									"var id_venda_solar = pm.variables.get('id_venda_solar');\r",
									"var id_venda_solar_approved = pm.variables.get('id_venda_solar_approved');\r",
									"var status_venda_solar_approved = pm.variables.get('status_venda_solar_approved');\r",
									"\r",
									"    if((pm.expect(id_venda_solar).to.eql(id_venda_solar_approved))&&\r",
									"        (pm.expect(status_venda_solar_approved).to.eql('approved'))){\r",
									"        console.log('Status da venda trocado com sucesso');\r",
									"    }\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"petId\": \"{{id_solar}}\",\n  \"quantity\": 1,\n  \"shipDate\": \"2020-12-19T05:47:00.916Z\",\n  \"status\": \"approved\",\n  \"complete\": true\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/store/order",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"store",
								"order"
							]
						}
					},
					"response": [
						{
							"name": "Invalid Order",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"<long>\",\n    \"petId\": \"<long>\",\n    \"quantity\": \"<integer>\",\n    \"shipDate\": \"<dateTime>\",\n    \"status\": \"<string>\",\n    \"complete\": \"<boolean>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/store/order",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"store",
										"order"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "successful operation",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"<long>\",\n    \"petId\": \"<long>\",\n    \"quantity\": \"<integer>\",\n    \"shipDate\": \"<dateTime>\",\n    \"status\": \"<string>\",\n    \"complete\": \"<boolean>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/store/order",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"store",
										"order"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"id\": \"<long>\",\n \"petId\": \"<long>\",\n \"quantity\": \"<integer>\",\n \"shipDate\": \"<dateTime>\",\n \"status\": \"<string>\",\n \"complete\": \"<boolean>\"\n}"
						}
					]
				},
				{
					"name": "Desloga karina.fernandes da sessão",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Logs out current logged in user session', function(){\r",
									"    pm.response.to.have.status(200);\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/user/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"logout"
							]
						}
					},
					"response": [
						{
							"name": "successful operation",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/user/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										"logout"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Faz o login como luana.fernandes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Logs user into the system', function(){\r",
									"    pm.response.to.have.status(200);\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/user/login?username=luana.fernandes&password=123456",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"login"
							],
							"query": [
								{
									"key": "username",
									"value": "luana.fernandes",
									"description": "(Required) The user name for login"
								},
								{
									"key": "password",
									"value": "123456",
									"description": "(Required) The password for login in clear text"
								}
							]
						}
					},
					"response": [
						{
							"name": "Invalid username/password supplied",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/user/login?username=<string>&password=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										"login"
									],
									"query": [
										{
											"key": "username",
											"value": "<string>"
										},
										{
											"key": "password",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "successful operation",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/user/login?username=<string>&password=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										"login"
									],
									"query": [
										{
											"key": "username",
											"value": "<string>"
										},
										{
											"key": "password",
											"value": "<string>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Expires-After",
									"value": "2005-10-20T13:30:08.012Z",
									"description": "date in UTC when token expires"
								},
								{
									"key": "X-Rate-Limit",
									"value": "-22633469",
									"description": "calls per hour allowed by the user"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"occaecat laborum eu cillum\""
						}
					]
				},
				{
					"name": "Vender Kai (dog) para luana.fernandes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Vender Brutus Maria', function(){\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test('has a id', function(){\r",
									"    const {id} = pm.response.json();\r",
									"    pm.environment.set('id_venda_kai', id);\r",
									"    console.log(pm.variables.get('id_venda_kai')); \r",
									"})\r",
									"\r",
									"pm.test('has a petId', function(){\r",
									"    const {petId} = pm.response.json();\r",
									"    pm.environment.set('id_kai', petId);\r",
									"    console.log(pm.variables.get('id_kai')); \r",
									"})\r",
									"\r",
									"pm.test('has a status', function(){\r",
									"    const {status} = pm.response.json();\r",
									"    pm.environment.set('status_venda_kai', status);\r",
									"    console.log(pm.variables.get('status_venda_kai')); \r",
									"})\r",
									"\r",
									"pm.test('has a completed', function(){\r",
									"    const {completed} = pm.response.json();\r",
									"    pm.environment.set('completed_venda_kai', completed);\r",
									"    console.log(pm.variables.get('completed_venda_kai')); \r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"petId\": \"{{id_kai}}\",\n  \"quantity\": 1,\n  \"shipDate\": \"2020-12-19T05:47:00.916Z\",\n  \"status\": \"placed\",\n  \"complete\": true\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/store/order",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"store",
								"order"
							]
						}
					},
					"response": [
						{
							"name": "successful operation",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"<long>\",\n    \"petId\": \"<long>\",\n    \"quantity\": \"<integer>\",\n    \"shipDate\": \"<dateTime>\",\n    \"status\": \"<string>\",\n    \"complete\": \"<boolean>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/store/order",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"store",
										"order"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"id\": \"<long>\",\n \"petId\": \"<long>\",\n \"quantity\": \"<integer>\",\n \"shipDate\": \"<dateTime>\",\n \"status\": \"<string>\",\n \"complete\": \"<boolean>\"\n}"
						},
						{
							"name": "Invalid Order",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"<long>\",\n    \"petId\": \"<long>\",\n    \"quantity\": \"<integer>\",\n    \"shipDate\": \"<dateTime>\",\n    \"status\": \"<string>\",\n    \"complete\": \"<boolean>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/store/order",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"store",
										"order"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Kai status delivered e validacoes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Kai status delivered e validacoes', function(){\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test('has a id', function(){\r",
									"    const {id} = pm.response.json();\r",
									"    pm.environment.set('id_venda_kai_delivered', id);\r",
									"    //console.log(pm.variables.get('id_venda_brutus_delivered')); \r",
									"})\r",
									"\r",
									"pm.test('has a petId', function(){\r",
									"    const {petId} = pm.response.json();\r",
									"    pm.environment.set('id_kai_delivered', petId);\r",
									"    //console.log(pm.variables.get('id_brutus_delivered')); \r",
									"})\r",
									"\r",
									"pm.test('has a status', function(){\r",
									"    const {status} = pm.response.json();\r",
									"    pm.environment.set('status_venda_kai_delivered', status);\r",
									"    //console.log(pm.variables.get('status_venda_brutus_delivered')); \r",
									"})\r",
									"\r",
									"pm.test('has a completed', function(){\r",
									"    const {completed} = pm.response.json();\r",
									"    pm.environment.set('completed_venda_kai_delivered', completed);\r",
									"    //console.log(pm.variables.get('completed_venda_brutus_delivered')); \r",
									"})\r",
									"\r",
									"pm.test('Checa status da venda = delivered', function(){\r",
									"var id_venda_kai = pm.variables.get('id_venda_kai');\r",
									"var id_venda_kai_delivered = pm.variables.get('id_venda_kai_delivered');\r",
									"var status_venda_kai_delivered = pm.variables.get('status_venda_kai_delivered');\r",
									"\r",
									"    if((pm.expect(id_venda_kai).to.eql(id_venda_kai_delivered))&&\r",
									"        (pm.expect(status_venda_kai_delivered).to.eql('delivered'))){\r",
									"        console.log('Status da venda trocado com sucesso');\r",
									"    }\r",
									"\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"petId\": \"{{id_kai}}\",\n  \"quantity\": 1,\n  \"shipDate\": \"2020-12-19T05:47:00.916Z\",\n  \"status\": \"delivered\",\n  \"complete\": true\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/store/order",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"store",
								"order"
							]
						}
					},
					"response": [
						{
							"name": "successful operation",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"<long>\",\n    \"petId\": \"<long>\",\n    \"quantity\": \"<integer>\",\n    \"shipDate\": \"<dateTime>\",\n    \"status\": \"<string>\",\n    \"complete\": \"<boolean>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/store/order",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"store",
										"order"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"id\": \"<long>\",\n \"petId\": \"<long>\",\n \"quantity\": \"<integer>\",\n \"shipDate\": \"<dateTime>\",\n \"status\": \"<string>\",\n \"complete\": \"<boolean>\"\n}"
						},
						{
							"name": "Invalid Order",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"<long>\",\n    \"petId\": \"<long>\",\n    \"quantity\": \"<integer>\",\n    \"shipDate\": \"<dateTime>\",\n    \"status\": \"<string>\",\n    \"complete\": \"<boolean>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/store/order",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"store",
										"order"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Vender Yoona (dog) para luana.fernandes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Vender Brutus Maria', function(){\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test('has a id', function(){\r",
									"    const {id} = pm.response.json();\r",
									"    pm.environment.set('id_venda_yoona', id);\r",
									"    console.log(pm.variables.get('id_venda')); \r",
									"})\r",
									"\r",
									"pm.test('has a petId', function(){\r",
									"    const {petId} = pm.response.json();\r",
									"    pm.environment.set('id_yoona', petId);\r",
									"    console.log(pm.variables.get('id_yoona')); \r",
									"})\r",
									"\r",
									"pm.test('has a status', function(){\r",
									"    const {status} = pm.response.json();\r",
									"    pm.environment.set('status_venda_yoona', status);\r",
									"    console.log(pm.variables.get('status_venda_yoona')); \r",
									"})\r",
									"\r",
									"pm.test('has a completed', function(){\r",
									"    const {completed} = pm.response.json();\r",
									"    pm.environment.set('completed_venda_yoona', completed);\r",
									"    console.log(pm.variables.get('completed_venda_yoona')); \r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"petId\": \"{{id_yoona}}\",\n  \"quantity\": 1,\n  \"shipDate\": \"2020-12-19T05:47:00.916Z\",\n  \"status\": \"placed\",\n  \"complete\": true\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/store/order",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"store",
								"order"
							]
						}
					},
					"response": [
						{
							"name": "successful operation",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"<long>\",\n    \"petId\": \"<long>\",\n    \"quantity\": \"<integer>\",\n    \"shipDate\": \"<dateTime>\",\n    \"status\": \"<string>\",\n    \"complete\": \"<boolean>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/store/order",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"store",
										"order"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"id\": \"<long>\",\n \"petId\": \"<long>\",\n \"quantity\": \"<integer>\",\n \"shipDate\": \"<dateTime>\",\n \"status\": \"<string>\",\n \"complete\": \"<boolean>\"\n}"
						},
						{
							"name": "Invalid Order",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"<long>\",\n    \"petId\": \"<long>\",\n    \"quantity\": \"<integer>\",\n    \"shipDate\": \"<dateTime>\",\n    \"status\": \"<string>\",\n    \"complete\": \"<boolean>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/store/order",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"store",
										"order"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Yoona status approved e validacoes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Yoona status approved e validacoes', function(){\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test('has a id', function(){\r",
									"    const {id} = pm.response.json();\r",
									"    pm.environment.set('id_venda_yoona_approved', id);\r",
									"    //console.log(pm.variables.get('id_venda_brutus_delivered')); \r",
									"})\r",
									"\r",
									"pm.test('has a petId', function(){\r",
									"    const {petId} = pm.response.json();\r",
									"    pm.environment.set('id_yoona_approved', petId);\r",
									"    //console.log(pm.variables.get('id_brutus_delivered')); \r",
									"})\r",
									"\r",
									"pm.test('has a status', function(){\r",
									"    const {status} = pm.response.json();\r",
									"    pm.environment.set('status_venda_yoona_approved', status);\r",
									"    console.log('status da venda', pm.variables.get('status_venda_yoona_approved'))\r",
									"})\r",
									"\r",
									"pm.test('has a completed', function(){\r",
									"    const {completed} = pm.response.json();\r",
									"    pm.environment.set('completed_venda_yoona_approved', completed);\r",
									"    //console.log(pm.variables.get('completed_venda_brutus_delivered')); \r",
									"})\r",
									"\r",
									"pm.test('Checa status da venda = delivered', function(){\r",
									"var id_venda_yoona = pm.variables.get('id_venda_yoona');\r",
									"var id_venda_yoona_approved = pm.variables.get('id_venda_yoona_approved');\r",
									"var status_venda_yoona_approved = pm.variables.get('status_venda_yoona_approved');\r",
									"\r",
									"    if((pm.expect(id_venda_yoona).to.eql(id_venda_yoona_approved))&&\r",
									"        (pm.expect(status_venda_yoona_approved).to.eql('approved'))){\r",
									"        console.log('Status da venda trocado com sucesso');\r",
									"    }\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"petId\": \"{{id_yoona}}\",\n  \"quantity\": 1,\n  \"shipDate\": \"2020-12-19T05:47:00.916Z\",\n  \"status\": \"approved\",\n  \"complete\": true\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/store/order",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"store",
								"order"
							]
						}
					},
					"response": [
						{
							"name": "successful operation",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"<long>\",\n    \"petId\": \"<long>\",\n    \"quantity\": \"<integer>\",\n    \"shipDate\": \"<dateTime>\",\n    \"status\": \"<string>\",\n    \"complete\": \"<boolean>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/store/order",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"store",
										"order"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"id\": \"<long>\",\n \"petId\": \"<long>\",\n \"quantity\": \"<integer>\",\n \"shipDate\": \"<dateTime>\",\n \"status\": \"<string>\",\n \"complete\": \"<boolean>\"\n}"
						},
						{
							"name": "Invalid Order",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"<long>\",\n    \"petId\": \"<long>\",\n    \"quantity\": \"<integer>\",\n    \"shipDate\": \"<dateTime>\",\n    \"status\": \"<string>\",\n    \"complete\": \"<boolean>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/store/order",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"store",
										"order"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Desloga luana.fernandes da sessão",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Logs out current logged in user session', function(){\r",
									"    pm.response.to.have.status(200);\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/user/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"logout"
							]
						}
					},
					"response": [
						{
							"name": "successful operation",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/user/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										"logout"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Faz o login como lorena.fernandes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Logs user into the system', function(){\r",
									"    pm.response.to.have.status(200);\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/user/login?username=lorena.fernandes&password=123456",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"login"
							],
							"query": [
								{
									"key": "username",
									"value": "lorena.fernandes",
									"description": "(Required) The user name for login"
								},
								{
									"key": "password",
									"value": "123456",
									"description": "(Required) The password for login in clear text"
								}
							]
						}
					},
					"response": [
						{
							"name": "Invalid username/password supplied",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/user/login?username=<string>&password=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										"login"
									],
									"query": [
										{
											"key": "username",
											"value": "<string>"
										},
										{
											"key": "password",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "successful operation",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/user/login?username=<string>&password=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										"login"
									],
									"query": [
										{
											"key": "username",
											"value": "<string>"
										},
										{
											"key": "password",
											"value": "<string>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Expires-After",
									"value": "2005-10-20T13:30:08.012Z",
									"description": "date in UTC when token expires"
								},
								{
									"key": "X-Rate-Limit",
									"value": "-22633469",
									"description": "calls per hour allowed by the user"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"occaecat laborum eu cillum\""
						}
					]
				},
				{
					"name": "Vender Jinki (dog) para lorena.fernandes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Vender Brutus Maria', function(){\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test('has a id', function(){\r",
									"    const {id} = pm.response.json();\r",
									"    pm.environment.set('id_venda_jinki', id);\r",
									"    console.log(pm.variables.get('id_venda_jinki')); \r",
									"})\r",
									"\r",
									"pm.test('has a petId', function(){\r",
									"    const {petId} = pm.response.json();\r",
									"    pm.environment.set('id_jinki', petId);\r",
									"    console.log(pm.variables.get('id_jinki')); \r",
									"})\r",
									"\r",
									"pm.test('has a status', function(){\r",
									"    const {status} = pm.response.json();\r",
									"    pm.environment.set('status_venda_jinki', status);\r",
									"    console.log(pm.variables.get('status_venda_jinki')); \r",
									"})\r",
									"\r",
									"pm.test('has a completed', function(){\r",
									"    const {completed} = pm.response.json();\r",
									"    pm.environment.set('completed_venda_jinki', completed);\r",
									"    console.log(pm.variables.get('completed_venda_jinki')); \r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"petId\": \"{{id_jinki}}\",\n  \"quantity\": 1,\n  \"shipDate\": \"2020-12-19T05:47:00.916Z\",\n  \"status\": \"placed\",\n  \"complete\": true\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/store/order",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"store",
								"order"
							]
						}
					},
					"response": [
						{
							"name": "successful operation",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"<long>\",\n    \"petId\": \"<long>\",\n    \"quantity\": \"<integer>\",\n    \"shipDate\": \"<dateTime>\",\n    \"status\": \"<string>\",\n    \"complete\": \"<boolean>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/store/order",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"store",
										"order"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"id\": \"<long>\",\n \"petId\": \"<long>\",\n \"quantity\": \"<integer>\",\n \"shipDate\": \"<dateTime>\",\n \"status\": \"<string>\",\n \"complete\": \"<boolean>\"\n}"
						},
						{
							"name": "Invalid Order",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"<long>\",\n    \"petId\": \"<long>\",\n    \"quantity\": \"<integer>\",\n    \"shipDate\": \"<dateTime>\",\n    \"status\": \"<string>\",\n    \"complete\": \"<boolean>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/store/order",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"store",
										"order"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Jinki status delivered e validacoes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Jinki status delivered e validacoes', function(){\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test('has a id', function(){\r",
									"    const {id} = pm.response.json();\r",
									"    pm.environment.set('id_venda_jinki_delivered', id);\r",
									"    //console.log(pm.variables.get('id_venda_brutus_delivered')); \r",
									"})\r",
									"\r",
									"pm.test('has a petId', function(){\r",
									"    const {petId} = pm.response.json();\r",
									"    pm.environment.set('id_jinki_delivered', petId);\r",
									"    //console.log(pm.variables.get('id_brutus_delivered')); \r",
									"})\r",
									"\r",
									"pm.test('has a status', function(){\r",
									"    const {status} = pm.response.json();\r",
									"    pm.environment.set('status_venda_jinki_delivered', status);\r",
									"    //console.log(pm.variables.get('status_venda_brutus_delivered')); \r",
									"})\r",
									"\r",
									"pm.test('has a completed', function(){\r",
									"    const {completed} = pm.response.json();\r",
									"    pm.environment.set('completed_venda_jinki_delivered', completed);\r",
									"    //console.log(pm.variables.get('completed_venda_brutus_delivered')); \r",
									"})\r",
									"\r",
									"pm.test('Checa status da venda = delivered', function(){\r",
									"var id_venda_jinki = pm.variables.get('id_venda_jinki');\r",
									"var id_venda_jinki_delivered = pm.variables.get('id_venda_jinki_delivered');\r",
									"var status_venda_jinki_delivered = pm.variables.get('status_venda_jinki_delivered');\r",
									"\r",
									"    if((pm.expect(id_venda_jinki).to.eql(id_venda_jinki_delivered))&&\r",
									"        (pm.expect(status_venda_jinki_delivered).to.eql('delivered'))){\r",
									"        console.log('Status da venda trocado com sucesso');\r",
									"    }\r",
									"\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"petId\": \"{{id_jinki}}\",\n  \"quantity\": 1,\n  \"shipDate\": \"2020-12-19T05:47:00.916Z\",\n  \"status\": \"delivered\",\n  \"complete\": true\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/store/order",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"store",
								"order"
							]
						}
					},
					"response": [
						{
							"name": "successful operation",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"<long>\",\n    \"petId\": \"<long>\",\n    \"quantity\": \"<integer>\",\n    \"shipDate\": \"<dateTime>\",\n    \"status\": \"<string>\",\n    \"complete\": \"<boolean>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/store/order",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"store",
										"order"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"id\": \"<long>\",\n \"petId\": \"<long>\",\n \"quantity\": \"<integer>\",\n \"shipDate\": \"<dateTime>\",\n \"status\": \"<string>\",\n \"complete\": \"<boolean>\"\n}"
						},
						{
							"name": "Invalid Order",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"<long>\",\n    \"petId\": \"<long>\",\n    \"quantity\": \"<integer>\",\n    \"shipDate\": \"<dateTime>\",\n    \"status\": \"<string>\",\n    \"complete\": \"<boolean>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/store/order",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"store",
										"order"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Vender Yuri (cat) para lorena.fernandes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Vender Brutus Maria', function(){\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test('has a id', function(){\r",
									"    const {id} = pm.response.json();\r",
									"    pm.environment.set('id_venda_yuri', id);\r",
									"    console.log(pm.variables.get('id_venda_yuri')); \r",
									"})\r",
									"\r",
									"pm.test('has a petId', function(){\r",
									"    const {petId} = pm.response.json();\r",
									"    pm.environment.set('id_yuri', petId);\r",
									"    console.log(pm.variables.get('id_yuri')); \r",
									"})\r",
									"\r",
									"pm.test('has a status', function(){\r",
									"    const {status} = pm.response.json();\r",
									"    pm.environment.set('status_venda_yuri', status);\r",
									"    console.log(pm.variables.get('status_venda_yuri')); \r",
									"})\r",
									"\r",
									"pm.test('has a completed', function(){\r",
									"    const {completed} = pm.response.json();\r",
									"    pm.environment.set('completed_venda_yuri', completed);\r",
									"    console.log(pm.variables.get('completed_venda_yuri')); \r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"petId\": \"{{id_yuri}}\",\n  \"quantity\": 1,\n  \"shipDate\": \"2020-12-19T05:47:00.916Z\",\n  \"status\": \"placed\",\n  \"complete\": true\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/store/order",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"store",
								"order"
							]
						}
					},
					"response": [
						{
							"name": "Invalid Order",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"<long>\",\n    \"petId\": \"<long>\",\n    \"quantity\": \"<integer>\",\n    \"shipDate\": \"<dateTime>\",\n    \"status\": \"<string>\",\n    \"complete\": \"<boolean>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/store/order",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"store",
										"order"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "successful operation",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"<long>\",\n    \"petId\": \"<long>\",\n    \"quantity\": \"<integer>\",\n    \"shipDate\": \"<dateTime>\",\n    \"status\": \"<string>\",\n    \"complete\": \"<boolean>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/store/order",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"store",
										"order"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"id\": \"<long>\",\n \"petId\": \"<long>\",\n \"quantity\": \"<integer>\",\n \"shipDate\": \"<dateTime>\",\n \"status\": \"<string>\",\n \"complete\": \"<boolean>\"\n}"
						}
					]
				},
				{
					"name": "Yuri status approved e validacoes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Yuri status approved e validacoes', function(){\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test('has a id', function(){\r",
									"    const {id} = pm.response.json();\r",
									"    pm.environment.set('id_venda_yuri_approved', id);\r",
									"    //console.log(pm.variables.get('id_venda_brutus_delivered')); \r",
									"})\r",
									"\r",
									"pm.test('has a petId', function(){\r",
									"    const {petId} = pm.response.json();\r",
									"    pm.environment.set('id_yuri_approved', petId);\r",
									"    //console.log(pm.variables.get('id_brutus_delivered')); \r",
									"})\r",
									"\r",
									"pm.test('has a status', function(){\r",
									"    const {status} = pm.response.json();\r",
									"    pm.environment.set('status_venda_yuri_approved', status);\r",
									"    console.log('status da venda', pm.variables.get('status_venda_yuri_approved'))\r",
									"})\r",
									"\r",
									"pm.test('has a completed', function(){\r",
									"    const {completed} = pm.response.json();\r",
									"    pm.environment.set('completed_venda_yuri_approved', completed);\r",
									"    //console.log(pm.variables.get('completed_venda_brutus_delivered')); \r",
									"})\r",
									"\r",
									"pm.test('Checa status da venda = delivered', function(){\r",
									"var id_venda_yuri = pm.variables.get('id_venda_yuri');\r",
									"var id_venda_yuri_approved = pm.variables.get('id_venda_yuri_approved');\r",
									"var status_venda_yuri_approved = pm.variables.get('status_venda_yuri_approved');\r",
									"\r",
									"    if((pm.expect(id_venda_yuri).to.eql(id_venda_yuri_approved))&&\r",
									"        (pm.expect(status_venda_yuri_approved).to.eql('approved'))){\r",
									"        console.log('Status da venda trocado com sucesso');\r",
									"    }\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"petId\": \"{{id_yuri}}\",\n  \"quantity\": 1,\n  \"shipDate\": \"2020-12-19T05:47:00.916Z\",\n  \"status\": \"approved\",\n  \"complete\": true\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/store/order",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"store",
								"order"
							]
						}
					},
					"response": [
						{
							"name": "Invalid Order",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"<long>\",\n    \"petId\": \"<long>\",\n    \"quantity\": \"<integer>\",\n    \"shipDate\": \"<dateTime>\",\n    \"status\": \"<string>\",\n    \"complete\": \"<boolean>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/store/order",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"store",
										"order"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "successful operation",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"<long>\",\n    \"petId\": \"<long>\",\n    \"quantity\": \"<integer>\",\n    \"shipDate\": \"<dateTime>\",\n    \"status\": \"<string>\",\n    \"complete\": \"<boolean>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/store/order",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"store",
										"order"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"id\": \"<long>\",\n \"petId\": \"<long>\",\n \"quantity\": \"<integer>\",\n \"shipDate\": \"<dateTime>\",\n \"status\": \"<string>\",\n \"complete\": \"<boolean>\"\n}"
						}
					]
				},
				{
					"name": "Desloga lorena.fernandes da sessão",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Logs out current logged in user session', function(){\r",
									"    pm.response.to.have.status(200);\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/user/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"logout"
							]
						}
					},
					"response": [
						{
							"name": "successful operation",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/user/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										"logout"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				}
			]
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://petstore.swagger.io/v2",
			"type": "string"
		}
	]
}